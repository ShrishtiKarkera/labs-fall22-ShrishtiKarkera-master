package main

import (
	"a1-2/mapreduce"
	"fmt"
	"os"
	"strconv"
	"strings"
	"unicode"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// TODO: you have to write this function

	//create wlist and maps
	//apply strings.FieldsFunc depending on if it is a letter or not
	//apply for loop to add the wordcount with word

	var maps []mapreduce.KeyValue
	//for _, i := range value {
	//	if unicode.IsLetter(i) {
	//		wlist = append(wlist, string(i))
	//	}
	//}
	// splitting function for strings.FIeldsFunc
	//func f(word rune) bool {
	//	if !unicode.isletter(word){
	//		return False
	//}
	//}

	//wlist := strings.FieldsFunc(value, func(r rune) bool {
	//	return !unicode.IsLetter(r)
	//})
	//
	//for _, i := range wlist {
	//	mapi := mapreduce.KeyValue{i, "1"}
	//	maps = append(maps, mapi)
	//}

	f := func(r rune) bool {
		return !unicode.IsLetter(r)
	}
	for _, i := range strings.FieldsFunc(value, f) {
		maps = append(maps, mapreduce.KeyValue{i, "1"})
	}
	return maps
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	// TODO: you also have to write this function
	sum := 0
	for _, i := range values {
		count, err := strconv.Atoi(i)
		if err != nil {
			fmt.Println(err)
		}
		sum += count
	}
	return strconv.Itoa(sum)
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
